Jenkins,
is an open-source continuous integration software tool written in the Java programming language for testing and reporting 
on isolated changes in a larger code base in real time. 
The software enables developers to find and solve defects in a code base rapidly and to automate testing of their builds.

Apache vs. Apache Tomcat?
The Apache “http” server is often refered to as Apache and is a server that handles http requests. 
Its job is to listen for requests and pass it on to the appropriate module to process. 
There are modules to process C, Java, PERL, PHP, Python, Ruby etc.
Apache Tomcat is a Java Servlet container. It runs as an Apache http server module. 
It constructs the HTML pages by executing Java Servlets and Java Server Pages and returns them to the http server.

JBoss vs. Tomcat: Choosing A Java Application Server
The big three are Tomcat, Glassfish, and JBoss(WildFly).

The Major Differences Between JBoss and Tomcat
Both JBoss and Tomcat are Java servlet application servers, but JBoss is a whole lot more. 
The substantial difference between the two is that JBoss provides a full Java Enterprise Edition (JEE) stack, including 
Enterprise JavaBeans and many other technologies that are useful for developers working on enterprise Java applications. 
Tomcat is much more limited. One way to think of it is that JBoss is a JEE stack that includes a servlet container and web server, 
whereas Tomcat, for the most part, is a servlet container and web server.

When To Choose JBoss?
JBoss is the best choice for applications where developers need full access to the functionality that the Java Enterprise 
Edition provides and are happy with the default implementations of that functionality that ship with it. 
If you don’t need the full range of JEE features, then choosing JBoss will add a lot of complexity to deployment and 
resource overhead that will go unused. 
For example, the JBoss installation files are around an order of magnitude larger than Tomcat’s.

When To Choose Tomcat?
Tomcat is a Java servlet container and web server, and, because it doesn’t come with an implementation of the full JEE stack, 
it is significantly lighter weight out of the box. For developers who don’t need the full JEE stack that has two main advantages.

- Significantly less complexity and resource use.
- Modularity.
There are numerous providers of add-ons that work with Tomcat. 
Developers can choose the specific implementations they want to use to add extra functionality. 
For example, Tomcat can’t natively host Enterprise JavaBeans. 
However, if users need Enterprise JavaBeans (EJB) functionality like the persistence and transaction processing that the EJB container 
model provides, but want to avoid the problems inherent in the main implementation, there are many lightweight alternatives, 
including the Spring Framework and OpenEJB

